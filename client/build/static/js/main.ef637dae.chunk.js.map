{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","componentDidMount","getBlogPosts","handleChanges","target","name","value","setState","console","log","state","formSubmission","event","preventDefault","payload","title","body","axios","url","method","data","then","resetInputs","catch","get","response","posts","this","className","onSubmit","type","placeholder","onChange","map","post","key","_id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sQA2GeA,E,kDAvGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,kBAAoB,WAClB,EAAKC,gBAXY,EAcnBC,cAAgB,YAAiB,IAAdC,EAAa,EAAbA,OACVC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MACb,EAAKC,SAAL,eAAgBF,EAAOC,IACvBE,QAAQC,IAAI,EAAKC,QAjBA,EAoBnBC,eAAiB,SAAAC,GACfA,EAAMC,iBAEN,IAAMC,EAAU,CACdC,MAAO,EAAKL,MAAMK,MAClBC,KAAM,EAAKN,MAAMM,MAGnBC,IAAM,CACJC,IAAI,QACJC,OAAQ,OACRC,KAAMN,IAEPO,MAAK,WACJb,QAAQC,IAAI,aACZ,EAAKa,cACL,EAAKpB,kBAENqB,OAAM,kBAAMf,QAAQC,IAAI,sBAtCR,EAyCnBP,aAAe,WACbe,IAAMO,IAAI,QACTH,MAAK,SAACI,GACL,IAAML,EAAOK,EAASL,KACtB,EAAKb,SAAS,CAAEmB,MAAON,IACvBZ,QAAQC,IAAI,oBAEbc,OAAM,WACLf,QAAQC,IAAI,aAjDG,EAqDnBa,YAAc,WACZ,EAAKf,SAAS,CACZQ,MAAO,GACPC,KAAM,MArDR,EAAKN,MAAQ,CACXK,MAAO,GACPC,KAAM,GACNU,MAAO,IANQ,E,qDAyEjB,OADAlB,QAAQC,IAAIkB,KAAKjB,OAEf,yBAAKkB,UAAU,QACb,iDACA,0BAAMC,SAAUF,KAAKhB,gBACnB,yBAAKiB,UAAU,cACb,2BAAOE,KAAK,OAAOzB,KAAK,QAAQ0B,YAAY,QAAQzB,MAAOqB,KAAKjB,MAAMK,MAAOiB,SAAUL,KAAKxB,iBAE9F,yBAAKyB,UAAU,cACb,8BAAUtB,MAAOqB,KAAKjB,MAAMM,KAAMe,YAAY,OAAOC,SAAUL,KAAKxB,cAAeE,KAAK,UAE1F,4BAAQyB,KAAK,UAAb,WAGF,6BAEIH,KAAKjB,MAAMgB,MAAMO,KAAI,SAACC,GACpB,OACE,yBAAKC,IAAKD,EAAKE,IAAKR,UAAU,SAC5B,4BAAKM,EAAKnB,OACV,2BAAImB,EAAKlB,gB,GA9FTqB,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.ef637dae.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      title: '',\n      body: '',\n      posts: []\n    }\n  }\n\n  componentDidMount = () => {\n    this.getBlogPosts()\n  }\n\n  handleChanges = ({ target }) => {\n    const {name, value} = target\n    this.setState({[name]: value})\n    console.log(this.state)\n  }\n\n  formSubmission = event => {\n    event.preventDefault()\n\n    const payload = {\n      title: this.state.title,\n      body: this.state.body\n    }\n\n    axios({\n      url:'/save',\n      method: 'POST',\n      data: payload\n    })\n    .then(() => {\n      console.log('Data sent')\n      this.resetInputs()\n      this.getBlogPosts()\n    })\n    .catch(() => console.log('Internal Error'))\n  }\n\n  getBlogPosts = () => {\n    axios.get('/get')\n    .then((response) => {\n      const data = response.data\n      this.setState({ posts: data})\n      console.log('Data received')\n    })\n    .catch(() => {\n      console.log('Error')\n    })\n  }\n\n  resetInputs = () => {\n    this.setState({\n      title: '',\n      body: ''\n    })\n  }\n\n  // displayPosts = (posts) => {\n  //   if(!posts.length) return null\n\n  //   return posts.map((post, index) => {\n  //     <div key={index}>\n  //       <h3>{post.title}</h3>\n  //       <p>{post.body}</p>\n  //     </div>\n  //   })\n  // }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"body\">\n        <h2>Welcome to my App</h2>\n        <form onSubmit={this.formSubmission}>\n          <div className=\"form-input\">\n            <input type=\"text\" name=\"title\" placeholder=\"Title\" value={this.state.title} onChange={this.handleChanges} />\n          </div>\n          <div className=\"form-input\">\n            <textarea value={this.state.body} placeholder=\"Body\" onChange={this.handleChanges} name=\"body\"></textarea>\n          </div>    \n          <button type=\"submit\">Submit</button>\n        </form>\n\n        <div>\n          {\n            this.state.posts.map((post) => {\n              return (\n                <div key={post._id} className=\"posts\">\n                  <h3>{post.title}</h3>\n                  <p>{post.body}</p>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}