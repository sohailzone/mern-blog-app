{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","componentDidMount","getBlogPosts","handleChanges","target","name","value","setState","console","log","state","formSubmission","event","preventDefault","title","body","payload","axios","url","method","data","then","resetInputs","catch","get","response","posts","err","className","onSubmit","this","type","placeholder","onChange","map","post","key","_id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sQAkHeA,E,kDA7Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,kBAAoB,WAClB,EAAKC,gBAXY,EAcnBC,cAAgB,YAAiB,IAAdC,EAAa,EAAbA,OACVC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MACb,EAAKC,SAAL,eAAgBF,EAAOC,IACvBE,QAAQC,IAAI,EAAKC,QAjBA,EAoBnBC,eAAiB,SAAAC,GAEf,GADAA,EAAMC,iBACkB,KAArB,EAAKH,MAAMI,OAAoC,KAApB,EAAKJ,MAAMK,KACvCP,QAAQC,IAAI,uBACT,CACH,IAAMO,EAAU,CACdF,MAAO,EAAKJ,MAAMI,MAClBC,KAAM,EAAKL,MAAMK,MAGnBE,IAAM,CACJC,IAAI,QACJC,OAAQ,OACRC,KAAMJ,IAEPK,MAAK,WACJb,QAAQC,IAAI,aACZ,EAAKa,cACL,EAAKpB,kBAENqB,OAAM,kBAAMf,QAAQC,IAAI,uBAxCV,EA4CjBP,aAAe,WACbe,IAAMO,IAAI,QACTH,MAAK,SAACI,GACL,IAAML,EAAOK,EAASL,KACtB,EAAKb,SAAS,CAAEmB,MAAON,IACvBZ,QAAQC,IAAI,oBAEbc,OAAM,SAACI,GACNnB,QAAQC,IAAI,SAAUkB,OApDT,EAyDnBL,YAAc,WACZ,EAAKf,SAAS,CACZO,MAAO,GACPC,KAAM,MAzDR,EAAKL,MAAQ,CACXI,MAAO,GACPC,KAAM,GACNW,MAAO,IANQ,E,qDA4EjB,OACE,6BACE,mDACA,wBAAIE,UAAU,YAAd,kBACA,0BAAMC,SAAUC,KAAKnB,eAAgBiB,UAAU,QAC7C,yBAAKA,UAAU,cACb,2BAAOG,KAAK,OAAO1B,KAAK,QAAQ2B,YAAY,QAAQ1B,MAAOwB,KAAKpB,MAAMI,MAAOmB,SAAUH,KAAK3B,iBAE9F,yBAAKyB,UAAU,cACb,8BAAUtB,MAAOwB,KAAKpB,MAAMK,KAAMiB,YAAY,OAAOC,SAAUH,KAAK3B,cAAeE,KAAK,UAE1F,4BAAQ0B,KAAK,UAAb,SAGF,wBAAIH,UAAU,mBAAd,cACA,yBAAKA,UAAU,aAEXE,KAAKpB,MAAMgB,MAAMQ,KAAI,SAACC,GACpB,OACE,yBAAKC,IAAKD,EAAKE,IAAKT,UAAU,SAC5B,4BAAKO,EAAKrB,OACV,2BAAIqB,EAAKpB,MACT,uC,GApGAuB,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.26925610.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      title: '',\n      body: '',\n      posts: []\n    }\n  }\n\n  componentDidMount = () => {\n    this.getBlogPosts()\n  }\n\n  handleChanges = ({ target }) => {\n    const {name, value} = target\n    this.setState({[name]: value})\n    console.log(this.state)\n  }\n\n  formSubmission = event => {\n    event.preventDefault()\n    if(this.state.title === '' || this.state.body === ''){\n      console.log('No data entered')\n    }else{\n      const payload = {\n        title: this.state.title,\n        body: this.state.body\n      }\n\n      axios({\n        url:'/save',\n        method: 'POST',\n        data: payload\n      })\n      .then(() => {\n        console.log('Data sent')\n        this.resetInputs()\n        this.getBlogPosts()\n      })\n      .catch(() => console.log('Internal Error'))\n    }\n  }\n\n    getBlogPosts = () => {\n      axios.get('/get')\n      .then((response) => {\n        const data = response.data\n        this.setState({ posts: data})\n        console.log('Data received')\n      })\n      .catch((err) => {\n        console.log('Error:', err)\n      })\n\n  }\n\n  resetInputs = () => {\n    this.setState({\n      title: '',\n      body: ''\n    })\n  }\n\n  // displayPosts = (posts) => {\n  //   if(!posts.length) return null\n\n  //   return posts.map((post, index) => {\n  //     <div key={index}>\n  //       <h3>{post.title}</h3>\n  //       <p>{post.body}</p>\n  //     </div>\n  //   })\n  // }\n\n  render() {\n    return (\n      <div>\n        <h2>Welcome to BlogRoom</h2>\n        <h3 className=\"blog-add\">Add Blog Post:</h3>\n        <form onSubmit={this.formSubmission} className=\"form\">\n          <div className=\"form-input\">\n            <input type=\"text\" name=\"title\" placeholder=\"Title\" value={this.state.title} onChange={this.handleChanges} />\n          </div>\n          <div className=\"form-input\">\n            <textarea value={this.state.body} placeholder=\"Body\" onChange={this.handleChanges} name=\"body\"></textarea>\n          </div>    \n          <button type=\"submit\">Post</button>\n        </form>\n\n        <h3 className=\"blog-list-title\">Post List:</h3>\n        <div className=\"blog-list\">          \n          {\n            this.state.posts.map((post) => {\n              return (\n                <div key={post._id} className=\"posts\">\n                  <h3>{post.title}</h3>\n                  <p>{post.body}</p>\n                  <hr />\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}